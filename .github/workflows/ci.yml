name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gcc-version: [9, 10, 11, 12]
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            gcc-version: 9
          - os: macos-latest
            gcc-version: 10
          - os: windows-latest
            gcc-version: 9
          - os: windows-latest
            gcc-version: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: ${{ matrix.gcc-version }}

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install coverage tools (Linux only)
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == 12
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov
        pip install lcov_cobertura

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.fpm
          build
        key: ${{ runner.os }}-fpm-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-

    - name: Build project
      run: fpm build --verbose

    - name: Run tests (with coverage on Linux/GCC-12)
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == 12
      run: |
        export OMP_NUM_THREADS=24
        fpm clean --all
        fpm test --profile debug --flag '-cpp -fprofile-arcs -ftest-coverage -g'

    - name: Run tests (without coverage)
      if: matrix.os != 'ubuntu-latest' || matrix.gcc-version != 12
      run: |
        export OMP_NUM_THREADS=24
        fpm test --verbose

    - name: Generate coverage data
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == 12
      continue-on-error: true
      run: |
        # Generate lcov coverage data
        lcov --capture --directory build/ --output-file coverage.info \
          --rc branch_coverage=1 \
          --ignore-errors inconsistent \
          --ignore-errors mismatch \
          --ignore-errors unused
        
        # Remove external dependencies and test files
        lcov --remove coverage.info \
          'build/dependencies/*' \
          'test/*' \
          '/usr/*' \
          --output-file coverage_filtered.info \
          --rc branch_coverage=1 \
          --ignore-errors mismatch \
          --ignore-errors unused
        
        # Convert to Cobertura XML
        lcov_cobertura coverage_filtered.info --output cobertura.xml
        
        # Display coverage summary
        lcov --summary coverage_filtered.info

    - name: Coverage Report
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == 12 && github.event_name == 'pull_request'
      uses: insightsengineering/coverage-action@v3
      continue-on-error: true
      with:
        path: ./cobertura.xml
        threshold: 70
        fail: false
        publish: true
        diff: true
        diff-branch: main
        diff-storage: _coverage_storage
        coverage-summary-title: "Code Coverage Summary"
        togglable-report: true
        exclude-detailed-coverage: false

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.gcc-version == 12
      uses: codecov/codecov-action@v4
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-fluff
        fail_ci_if_error: false

    - name: Run self-check (fluff on itself)
      run: |
        fpm run fluff -- check src/ --output-format json > fluff-results.json
        cat fluff-results.json
      continue-on-error: true

    - name: Upload fluff results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fluff-results-${{ matrix.os }}-gcc${{ matrix.gcc-version }}
        path: fluff-results.json

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build fluff
      run: fpm build

    - name: Run fluff on source code
      run: |
        fpm run fluff -- check src/ \
          --output-format json \
          --fail-on-error \
          --config fluff.toml
        
    - name: Check code formatting
      run: |
        fpm run fluff -- format --check src/
        if [ $? -ne 0 ]; then
          echo "Code formatting issues found. Run 'fpm run fluff -- format --fix src/' to fix."
          exit 1
        fi

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build fluff (optimized)
      run: fpm build --profile release

    - name: Download test Fortran projects
      run: |
        # Clone some real Fortran projects for benchmarking
        mkdir -p benchmark_projects
        cd benchmark_projects
        
        # Clone stdlib (lightweight)
        git clone --depth 1 https://github.com/fortran-lang/stdlib.git
        
        # Clone fpm itself
        git clone --depth 1 https://github.com/fortran-lang/fpm.git

    - name: Run performance benchmarks
      run: |
        echo "=== Performance Benchmarks ===" > benchmark-results.txt
        echo "Date: $(date)" >> benchmark-results.txt
        echo "Commit: ${{ github.sha }}" >> benchmark-results.txt
        echo "" >> benchmark-results.txt
        
        # Benchmark on stdlib
        echo "### stdlib benchmark ###" >> benchmark-results.txt
        time fpm run fluff -- check benchmark_projects/stdlib/src/ \
          --output-format json 2>&1 | tee -a benchmark-results.txt
        
        echo "" >> benchmark-results.txt
        
        # Benchmark on fpm
        echo "### fpm benchmark ###" >> benchmark-results.txt
        time fpm run fluff -- check benchmark_projects/fpm/src/ \
          --output-format json 2>&1 | tee -a benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build fluff
      run: fpm build

    - name: Generate documentation
      run: |
        # Generate help documentation
        fpm run fluff -- --help > docs/cli-help.txt
        fpm run fluff -- check --help > docs/check-help.txt
        fpm run fluff -- format --help > docs/format-help.txt
        
        # Generate rule documentation
        fpm run fluff -- list-rules --output-format json > docs/rules.json

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build fluff
      run: fpm build

    - name: Run security analysis
      run: |
        # Run fluff on itself with security-focused rules
        fpm run fluff -- check src/ \
          --select "F006,F007,P001,P002,P003" \
          --output-format sarif > security-results.sarif

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: security-results.sarif

  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test, lint, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm
      uses: fortran-lang/setup-fpm@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build release version
      run: fpm build --profile release

    - name: Package release artifacts
      run: |
        mkdir -p release
        cp build/gfortran_*/app/fluff release/
        cp README.md LICENSE release/
        cp -r scripts/ release/
        tar -czf fluff-linux-x64.tar.gz -C release .

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fluff-release
        path: fluff-linux-x64.tar.gz