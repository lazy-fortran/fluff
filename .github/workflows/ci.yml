name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        gcc-version: [9, 10, 11, 12]
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            gcc-version: 9
          - os: macos-latest
            gcc-version: 10
          - os: windows-latest
            gcc-version: 9
          - os: windows-latest
            gcc-version: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: ${{ matrix.gcc-version }}

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.fpm
          build
        key: ${{ runner.os }}-fpm-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-

    - name: Build project
      run: fpm build --verbose

    - name: Run tests
      run: |
        export OMP_NUM_THREADS=24
        fpm test --verbose

    - name: Run self-check (fluff on itself)
      run: |
        fpm run fluff -- check src/ --output-format json > fluff-results.json
        cat fluff-results.json
      continue-on-error: true

    - name: Upload fluff results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: fluff-results-${{ matrix.os }}-gcc${{ matrix.gcc-version }}
        path: fluff-results.json

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Build fluff
      run: fpm build

    - name: Run fluff on source code
      run: |
        fpm run fluff -- check src/ \
          --output-format json \
          --fail-on-error \
          --config fluff.toml
        
    - name: Check code formatting
      run: |
        fpm run fluff -- format --check src/
        if [ $? -ne 0 ]; then
          echo "Code formatting issues found. Run 'fpm run fluff -- format --fix src/' to fix."
          exit 1
        fi

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Build fluff (optimized)
      run: fpm build --profile release

    - name: Download test Fortran projects
      run: |
        # Clone some real Fortran projects for benchmarking
        mkdir -p benchmark_projects
        cd benchmark_projects
        
        # Clone stdlib (lightweight)
        git clone --depth 1 https://github.com/fortran-lang/stdlib.git
        
        # Clone fpm itself
        git clone --depth 1 https://github.com/fortran-lang/fpm.git

    - name: Run performance benchmarks
      run: |
        echo "=== Performance Benchmarks ===" > benchmark-results.txt
        echo "Date: $(date)" >> benchmark-results.txt
        echo "Commit: ${{ github.sha }}" >> benchmark-results.txt
        echo "" >> benchmark-results.txt
        
        # Benchmark on stdlib
        echo "### stdlib benchmark ###" >> benchmark-results.txt
        time fpm run fluff -- check benchmark_projects/stdlib/src/ \
          --output-format json 2>&1 | tee -a benchmark-results.txt
        
        echo "" >> benchmark-results.txt
        
        # Benchmark on fpm
        echo "### fpm benchmark ###" >> benchmark-results.txt
        time fpm run fluff -- check benchmark_projects/fpm/src/ \
          --output-format json 2>&1 | tee -a benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Build fluff
      run: fpm build

    - name: Generate documentation
      run: |
        # Generate help documentation
        fpm run fluff -- --help > docs/cli-help.txt
        fpm run fluff -- check --help > docs/check-help.txt
        fpm run fluff -- format --help > docs/format-help.txt
        
        # Generate rule documentation
        fpm run fluff -- list-rules --output-format json > docs/rules.json

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Build fluff
      run: fpm build

    - name: Run security analysis
      run: |
        # Run fluff on itself with security-focused rules
        fpm run fluff -- check src/ \
          --select "F006,F007,P001,P002,P003" \
          --output-format sarif > security-results.sarif

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: security-results.sarif

  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [test, lint, performance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 11

    - name: Setup fpm (Linux)
      if: runner.os == 'Linux'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-linux-x86_64
        chmod +x fpm-0.10.0-linux-x86_64
        sudo mv fpm-0.10.0-linux-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (macOS)
      if: runner.os == 'macOS'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-macos-x86_64
        chmod +x fpm-0.10.0-macos-x86_64
        sudo mv fpm-0.10.0-macos-x86_64 /usr/local/bin/fpm

    - name: Setup fpm (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://github.com/fortran-lang/fpm/releases/download/v0.10.0/fpm-0.10.0-windows-x86_64.exe -OutFile fpm.exe
        New-Item -ItemType Directory -Force -Path C:\fpm
        Move-Item -Path fpm.exe -Destination C:\fpm\fpm.exe
        echo "C:\fpm" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

    - name: Build release version
      run: fpm build --profile release

    - name: Package release artifacts
      run: |
        mkdir -p release
        cp build/gfortran_*/app/fluff release/
        cp README.md LICENSE release/
        cp -r scripts/ release/
        tar -czf fluff-linux-x64.tar.gz -C release .

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: fluff-release
        path: fluff-linux-x64.tar.gz