#!/bin/bash
# Pre-commit hook for fluff - Fortran linter and formatter
# Place this file in .git/hooks/pre-commit and make it executable

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
FLUFF_CMD="fluff"
FLUFF_CONFIG="fluff.toml"
CHECK_MODIFIED_ONLY=true
AUTO_FIX=false
FAIL_ON_WARNINGS=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --auto-fix)
            AUTO_FIX=true
            shift
            ;;
        --fail-on-warnings)
            FAIL_ON_WARNINGS=true
            shift
            ;;
        --check-all)
            CHECK_MODIFIED_ONLY=false
            shift
            ;;
        --config)
            FLUFF_CONFIG="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo -e "${GREEN}üöÄ Running fluff pre-commit checks...${NC}"

# Check if fluff is installed
if ! command -v $FLUFF_CMD &> /dev/null; then
    echo -e "${RED}‚ùå Error: fluff is not installed or not in PATH${NC}"
    echo "Please install fluff before committing."
    echo "Visit: https://github.com/fortran-lang/fluff"
    exit 1
fi

# Check if config file exists
if [[ -f "$FLUFF_CONFIG" ]]; then
    echo -e "${GREEN}üìã Using config: $FLUFF_CONFIG${NC}"
    CONFIG_ARG="--config $FLUFF_CONFIG"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No config file found, using defaults${NC}"
    CONFIG_ARG=""
fi

# Get list of Fortran files to check
if [[ "$CHECK_MODIFIED_ONLY" == true ]]; then
    # Only check staged files
    FORTRAN_FILES=$(git diff --cached --name-only --diff-filter=ACM | \
                   grep -E '\.(f|f90|f95|f03|f08|F|F90|F95|F03|F08)$' || true)
    
    if [[ -z "$FORTRAN_FILES" ]]; then
        echo -e "${GREEN}‚úÖ No Fortran files staged for commit${NC}"
        exit 0
    fi
    
    echo -e "${GREEN}üìÅ Checking staged Fortran files:${NC}"
    echo "$FORTRAN_FILES" | sed 's/^/  - /'
else
    # Check all Fortran files in the repository
    FORTRAN_FILES=$(find . -name "*.f" -o -name "*.f90" -o -name "*.f95" \
                         -o -name "*.f03" -o -name "*.f08" -o -name "*.F" \
                         -o -name "*.F90" -o -name "*.F95" -o -name "*.F03" \
                         -o -name "*.F08" | grep -v ".git" || true)
    
    if [[ -z "$FORTRAN_FILES" ]]; then
        echo -e "${GREEN}‚úÖ No Fortran files found in repository${NC}"
        exit 0
    fi
    
    echo -e "${GREEN}üìÅ Checking all Fortran files in repository${NC}"
fi

# Convert newline-separated list to space-separated for command
FORTRAN_FILES_ARRAY=($FORTRAN_FILES)

# Run fluff check
echo -e "${GREEN}üîç Running fluff check...${NC}"
CHECK_OUTPUT=""
CHECK_EXIT_CODE=0

if ! CHECK_OUTPUT=$($FLUFF_CMD check $CONFIG_ARG "${FORTRAN_FILES_ARRAY[@]}" 2>&1); then
    CHECK_EXIT_CODE=$?
fi

# Display check results
if [[ $CHECK_EXIT_CODE -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ All checks passed!${NC}"
else
    echo -e "${RED}‚ùå Fluff found issues:${NC}"
    echo "$CHECK_OUTPUT"
    
    # Count errors and warnings
    ERROR_COUNT=$(echo "$CHECK_OUTPUT" | grep -c "error:" || true)
    WARNING_COUNT=$(echo "$CHECK_OUTPUT" | grep -c "warning:" || true)
    
    echo ""
    echo -e "${RED}Errors: $ERROR_COUNT${NC}"
    echo -e "${YELLOW}Warnings: $WARNING_COUNT${NC}"
    
    # Auto-fix if enabled
    if [[ "$AUTO_FIX" == true ]]; then
        echo -e "${YELLOW}üîß Attempting to auto-fix issues...${NC}"
        
        if $FLUFF_CMD format --fix $CONFIG_ARG "${FORTRAN_FILES_ARRAY[@]}"; then
            echo -e "${GREEN}‚úÖ Auto-fix completed${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Please review the changes and re-stage them${NC}"
            
            # Show what was changed
            echo -e "${GREEN}üìù Modified files:${NC}"
            git diff --name-only "${FORTRAN_FILES_ARRAY[@]}" | sed 's/^/  - /' || true
            
            echo ""
            echo -e "${YELLOW}Run 'git add' on the modified files and commit again${NC}"
            exit 1
        else
            echo -e "${RED}‚ùå Auto-fix failed${NC}"
        fi
    fi
    
    # Determine if we should fail the commit
    if [[ $ERROR_COUNT -gt 0 ]] || [[ "$FAIL_ON_WARNINGS" == true && $WARNING_COUNT -gt 0 ]]; then
        echo ""
        echo -e "${RED}‚ùå Commit blocked due to fluff issues${NC}"
        echo "Fix the issues above or use --no-verify to skip this hook"
        exit 1
    elif [[ $WARNING_COUNT -gt 0 ]]; then
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Commit allowed but warnings found${NC}"
        echo "Consider fixing these warnings for better code quality"
    fi
fi

# Run formatter check (if not auto-fixing)
if [[ "$AUTO_FIX" != true ]]; then
    echo -e "${GREEN}üé® Checking code formatting...${NC}"
    
    TEMP_DIR=$(mktemp -d)
    trap "rm -rf $TEMP_DIR" EXIT
    
    FORMAT_ISSUES=false
    
    for file in "${FORTRAN_FILES_ARRAY[@]}"; do
        # Create formatted version
        if $FLUFF_CMD format $CONFIG_ARG "$file" > "$TEMP_DIR/$(basename "$file")"; then
            # Compare with original
            if ! diff -q "$file" "$TEMP_DIR/$(basename "$file")" > /dev/null; then
                if [[ "$FORMAT_ISSUES" == false ]]; then
                    echo -e "${YELLOW}üìù Formatting issues found in:${NC}"
                    FORMAT_ISSUES=true
                fi
                echo "  - $file"
            fi
        fi
    done
    
    if [[ "$FORMAT_ISSUES" == true ]]; then
        echo ""
        echo -e "${YELLOW}üí° To fix formatting issues, run:${NC}"
        echo "  fluff format --fix ${FORTRAN_FILES_ARRAY[*]}"
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è  Commit allowed but formatting could be improved${NC}"
    else
        echo -e "${GREEN}‚úÖ All files are properly formatted!${NC}"
    fi
fi

echo -e "${GREEN}üéâ Pre-commit checks completed successfully!${NC}"
exit 0